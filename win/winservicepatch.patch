*** le	2012-06-28 14:33:35.000000000 +0100
--- lewinservice.py	2012-06-28 15:19:01.000000000 +0100
***************
*** 11,17 ****
  # Constants
  #
  
! VERSION = "0.8.26"
  
  NOT_SET = None
  
--- 11,17 ----
  # Constants
  #
  
! VERSION = "0.8.27"
  
  NOT_SET = None
  
***************
*** 259,264 ****
--- 259,275 ----
  import getpass
  import atexit
  
+ #windows exe imports
+ import servicemanager
+ import win32event
+ import win32con
+ import winerror
+ import traceback
+ import win32api
+ import win32serviceutil
+ import win32service
+ import win32evtlog		
+ import win32evtlogutil
  
  #
  # Start logging
***************
*** 1515,1664 ****
  
  config = Config()
  
- #windows specific imports
- if os.name != "posix":
- 
- 	# winservice.py
- 	# code adapted from http://code.activestate.com/recipes/551780/
- 
- 	from os.path import splitext, abspath
- 	import win32event
- 	import win32con
- 	import winerror
- 	import traceback
- 	import win32api
- 	import win32serviceutil
- 	import win32service
- 	import win32evtlog		
- 	import win32evtlogutil
- 
- 	class Service(win32serviceutil.ServiceFramework):
- 		_svc_name_ = '_LEService'
- 		_svc_display_name_ = '_Service Template'
- 		def __init__(self, *args):
- 			win32serviceutil.ServiceFramework.__init__(self, *args)
- 			self.log('init')
- 			self.stop_event = win32event.CreateEvent(None, 0, 0, None)
- 		def log(self, msg):
- 			import servicemanager
- 			servicemanager.LogInfoMsg(str(msg))
- 		def sleep(self, sec):
- 			win32api.Sleep(sec*1000, True)
- 		def SvcDoRun(self):
- 			self.ReportServiceStatus(win32service.SERVICE_START_PENDING)
- 			try:
- 				self.ReportServiceStatus(win32service.SERVICE_RUNNING)
- 				self.log('start')
- 				self.start()
- 				self.log('wait')
- 				win32event.WaitForSingleObject(self.stop_event, win32event.INFINITE)
- 				self.log('done')
- 			except Exception, x:
- 				self.log('Exception : %s' % x)
- 				self.SvcStop()
- 		def SvcStop(self):
- 			self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
- 			self.log('stopping')
- 			self.stop()
- 			self.log('stopped')
- 			win32event.SetEvent(self.stop_event)
- 			self.ReportServiceStatus(win32service.SERVICE_STOPPED)
- 		# to be overridden
- 		def start(self): pass
- 		# to be overridden
- 		def stop(self): pass
- 
- 	def instwinservice(cls, name, display_name, stay_alive=True):
- 	    '''
- 		Install a Service
- 		    
- 		    cls : the class (derived from Service) that implement the Service
- 		    name : Service name
- 		    display_name : the name displayed in the service manager
- 		    stay_alive : Service will stop on logout if False
- 	    '''
- 	    cls._svc_name_ = name
- 	    cls._svc_display_name_ = display_name or name
- 	    try:
- 		module_path=sys.modules[cls.__module__].__file__
- 	    except AttributeError:
- 		# maybe py2exe went by
- 		from sys import executable
- 		module_path=executable
- 	    module_file=splitext(abspath(module_path))[0]
- 	    cls._svc_reg_class_ = '%s.%s' % (module_file, cls.__name__)
- 	    if stay_alive: win32api.SetConsoleCtrlHandler(lambda x: True, True)
- 	    try:
- 		win32serviceutil.InstallService(
- 			cls._svc_reg_class_,
- 			cls._svc_name_,
- 			cls._svc_display_name_,
- 			startType=win32service.SERVICE_AUTO_START
- 			)
- 		print 'Install ok'
- 	    except Exception, x:
- 		print str(x)
- 
- 		
- 	def stwinservice(cls, name, display_name, stay_alive=True):
- 	    '''
- 		Start Service
- 		    cls : the class (derived from Service) that implement the Service
- 		    name : Service name
- 		    display_name : the name displayed in the service manager
- 		    stay_alive : Service will stop on logout if False
- 	    '''
- 
- 	    cls._svc_name_ = name
- 	    cls._svc_display_name_ = display_name or name
- 	    try:
- 		module_path=sys.modules[cls.__module__].__file__
- 	    except AttributeError:
- 		# maybe py2exe went by
- 		from sys import executable
- 		module_path=executable
- 	    module_file=splitext(abspath(module_path))[0]
- 	    cls._svc_reg_class_ = '%s.%s' % (module_file, cls.__name__)
- 	    if stay_alive: win32api.SetConsoleCtrlHandler(lambda x: True, True)
- 	    try:
- 		win32serviceutil.StartService(
- 			cls._svc_name_
- 			)
- 		print 'Start ok'
- 	    except Exception, x:
- 		print str(x)
- 
- 
- 	class WinStart(Service):
- 
- 
- 	    def start(self):
- 		self.runflag=True
- 		self.log("Logentries is alive ...")
- 
- 		#from win32com.shell import shellcon, shell
- 		#c_dir = shell.SHGetFolderPath(0, shellcon.CSIDL_COMMON_APPDATA, 0, 0)
- 		#self.log(c_dir)
- 		cmd_monitor([])
- 
- 	    def stop(self):
- 		self.runflag=False
- 		self.log("I'm done")
- 
- 	def installwinservice( args):
- 	    no_more_args( args)
- 	    config.load()
- 	    config.agent_key_required()
- 	    config.user_key_required()
-    	    instwinservice(WinStart, 'Logentries', 'Logentries')
- 
- 
- 	def startwinservice( args):
- 	    no_more_args( args)
- 	    config.load()
- 	    config.agent_key_required()
- 	    config.user_key_required()
- 	    stwinservice(WinStart, 'Logentries', 'Logentries')
  
  	
  
--- 1526,1531 ----
